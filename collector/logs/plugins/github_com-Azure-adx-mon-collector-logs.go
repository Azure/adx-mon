// Code generated by 'yaegi extract github.com/Azure/adx-mon/collector/logs'. DO NOT EDIT.

package plugins

import (
	"context"
	"github.com/Azure/adx-mon/collector/logs"
	"reflect"
)

func init() {
	Symbols["github.com/Azure/adx-mon/collector/logs/logs"] = map[string]reflect.Value{
		// type definitions
		"Log":         reflect.ValueOf((*logs.Log)(nil)),
		"LogBatch":    reflect.ValueOf((*logs.LogBatch)(nil)),
		"Transformer": reflect.ValueOf((*logs.Transformer)(nil)),

		// interface wrapper definitions
		"_Transformer": reflect.ValueOf((*_github_com_Azure_adx_mon_collector_logs_Transformer)(nil)),
	}
}

// _github_com_Azure_adx_mon_collector_logs_Transformer is an interface wrapper for Transformer type
type _github_com_Azure_adx_mon_collector_logs_Transformer struct {
	IValue     interface{}
	WClose     func() error
	WOpen      func(a0 context.Context) error
	WTransform func(a0 context.Context, a1 *logs.LogBatch) (*logs.LogBatch, error)
}

func (W _github_com_Azure_adx_mon_collector_logs_Transformer) Close() error {
	return W.WClose()
}
func (W _github_com_Azure_adx_mon_collector_logs_Transformer) Open(a0 context.Context) error {
	return W.WOpen(a0)
}
func (W _github_com_Azure_adx_mon_collector_logs_Transformer) Transform(a0 context.Context, a1 *logs.LogBatch) (*logs.LogBatch, error) {
	return W.WTransform(a0, a1)
}
