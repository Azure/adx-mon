// Copyright 2019, OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: opentelemetry/proto/collector/metrics/v1/metrics_service.proto

//go:build protoopaque

package metricsv1

import (
	v1 "buf.build/gen/go/opentelemetry/opentelemetry/protocolbuffers/go/opentelemetry/proto/metrics/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ExportMetricsServiceRequest struct {
	state                      protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_ResourceMetrics *[]*v1.ResourceMetrics `protobuf:"bytes,1,rep,name=resource_metrics,json=resourceMetrics,proto3"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *ExportMetricsServiceRequest) Reset() {
	*x = ExportMetricsServiceRequest{}
	mi := &file_opentelemetry_proto_collector_metrics_v1_metrics_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportMetricsServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportMetricsServiceRequest) ProtoMessage() {}

func (x *ExportMetricsServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_opentelemetry_proto_collector_metrics_v1_metrics_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ExportMetricsServiceRequest) GetResourceMetrics() []*v1.ResourceMetrics {
	if x != nil {
		if x.xxx_hidden_ResourceMetrics != nil {
			return *x.xxx_hidden_ResourceMetrics
		}
	}
	return nil
}

func (x *ExportMetricsServiceRequest) SetResourceMetrics(v []*v1.ResourceMetrics) {
	x.xxx_hidden_ResourceMetrics = &v
}

type ExportMetricsServiceRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// An array of ResourceMetrics.
	// For data coming from a single resource this array will typically contain one
	// element. Intermediary nodes (such as OpenTelemetry Collector) that receive
	// data from multiple origins typically batch the data before forwarding further and
	// in that case this array will contain multiple elements.
	ResourceMetrics []*v1.ResourceMetrics
}

func (b0 ExportMetricsServiceRequest_builder) Build() *ExportMetricsServiceRequest {
	m0 := &ExportMetricsServiceRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_ResourceMetrics = &b.ResourceMetrics
	return m0
}

type ExportMetricsServiceResponse struct {
	state                     protoimpl.MessageState       `protogen:"opaque.v1"`
	xxx_hidden_PartialSuccess *ExportMetricsPartialSuccess `protobuf:"bytes,1,opt,name=partial_success,json=partialSuccess,proto3"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *ExportMetricsServiceResponse) Reset() {
	*x = ExportMetricsServiceResponse{}
	mi := &file_opentelemetry_proto_collector_metrics_v1_metrics_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportMetricsServiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportMetricsServiceResponse) ProtoMessage() {}

func (x *ExportMetricsServiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_opentelemetry_proto_collector_metrics_v1_metrics_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ExportMetricsServiceResponse) GetPartialSuccess() *ExportMetricsPartialSuccess {
	if x != nil {
		return x.xxx_hidden_PartialSuccess
	}
	return nil
}

func (x *ExportMetricsServiceResponse) SetPartialSuccess(v *ExportMetricsPartialSuccess) {
	x.xxx_hidden_PartialSuccess = v
}

func (x *ExportMetricsServiceResponse) HasPartialSuccess() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_PartialSuccess != nil
}

func (x *ExportMetricsServiceResponse) ClearPartialSuccess() {
	x.xxx_hidden_PartialSuccess = nil
}

type ExportMetricsServiceResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The details of a partially successful export request.
	//
	// If the request is only partially accepted
	// (i.e. when the server accepts only parts of the data and rejects the rest)
	// the server MUST initialize the `partial_success` field and MUST
	// set the `rejected_<signal>` with the number of items it rejected.
	//
	// Servers MAY also make use of the `partial_success` field to convey
	// warnings/suggestions to senders even when the request was fully accepted.
	// In such cases, the `rejected_<signal>` MUST have a value of `0` and
	// the `error_message` MUST be non-empty.
	//
	// A `partial_success` message with an empty value (rejected_<signal> = 0 and
	// `error_message` = "") is equivalent to it not being set/present. Senders
	// SHOULD interpret it the same way as in the full success case.
	PartialSuccess *ExportMetricsPartialSuccess
}

func (b0 ExportMetricsServiceResponse_builder) Build() *ExportMetricsServiceResponse {
	m0 := &ExportMetricsServiceResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_PartialSuccess = b.PartialSuccess
	return m0
}

type ExportMetricsPartialSuccess struct {
	state                         protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_RejectedDataPoints int64                  `protobuf:"varint,1,opt,name=rejected_data_points,json=rejectedDataPoints,proto3"`
	xxx_hidden_ErrorMessage       string                 `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *ExportMetricsPartialSuccess) Reset() {
	*x = ExportMetricsPartialSuccess{}
	mi := &file_opentelemetry_proto_collector_metrics_v1_metrics_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportMetricsPartialSuccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportMetricsPartialSuccess) ProtoMessage() {}

func (x *ExportMetricsPartialSuccess) ProtoReflect() protoreflect.Message {
	mi := &file_opentelemetry_proto_collector_metrics_v1_metrics_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ExportMetricsPartialSuccess) GetRejectedDataPoints() int64 {
	if x != nil {
		return x.xxx_hidden_RejectedDataPoints
	}
	return 0
}

func (x *ExportMetricsPartialSuccess) GetErrorMessage() string {
	if x != nil {
		return x.xxx_hidden_ErrorMessage
	}
	return ""
}

func (x *ExportMetricsPartialSuccess) SetRejectedDataPoints(v int64) {
	x.xxx_hidden_RejectedDataPoints = v
}

func (x *ExportMetricsPartialSuccess) SetErrorMessage(v string) {
	x.xxx_hidden_ErrorMessage = v
}

type ExportMetricsPartialSuccess_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The number of rejected data points.
	//
	// A `rejected_<signal>` field holding a `0` value indicates that the
	// request was fully accepted.
	RejectedDataPoints int64
	// A developer-facing human-readable message in English. It should be used
	// either to explain why the server rejected parts of the data during a partial
	// success or to convey warnings/suggestions during a full success. The message
	// should offer guidance on how users can address such issues.
	//
	// error_message is an optional field. An error_message with an empty value
	// is equivalent to it not being set.
	ErrorMessage string
}

func (b0 ExportMetricsPartialSuccess_builder) Build() *ExportMetricsPartialSuccess {
	m0 := &ExportMetricsPartialSuccess{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_RejectedDataPoints = b.RejectedDataPoints
	x.xxx_hidden_ErrorMessage = b.ErrorMessage
	return m0
}

var File_opentelemetry_proto_collector_metrics_v1_metrics_service_proto protoreflect.FileDescriptor

const file_opentelemetry_proto_collector_metrics_v1_metrics_service_proto_rawDesc = "" +
	"\n" +
	">opentelemetry/proto/collector/metrics/v1/metrics_service.proto\x12(opentelemetry.proto.collector.metrics.v1\x1a,opentelemetry/proto/metrics/v1/metrics.proto\"y\n" +
	"\x1bExportMetricsServiceRequest\x12Z\n" +
	"\x10resource_metrics\x18\x01 \x03(\v2/.opentelemetry.proto.metrics.v1.ResourceMetricsR\x0fresourceMetrics\"\x8e\x01\n" +
	"\x1cExportMetricsServiceResponse\x12n\n" +
	"\x0fpartial_success\x18\x01 \x01(\v2E.opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccessR\x0epartialSuccess\"t\n" +
	"\x1bExportMetricsPartialSuccess\x120\n" +
	"\x14rejected_data_points\x18\x01 \x01(\x03R\x12rejectedDataPoints\x12#\n" +
	"\rerror_message\x18\x02 \x01(\tR\ferrorMessage2\xac\x01\n" +
	"\x0eMetricsService\x12\x99\x01\n" +
	"\x06Export\x12E.opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest\x1aF.opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse\"\x00B\xe3\x01\n" +
	"+io.opentelemetry.proto.collector.metrics.v1B\x13MetricsServiceProtoP\x01Zrbuf.build/gen/go/opentelemetry/opentelemetry/protocolbuffers/go/opentelemetry/proto/collector/metrics/v1;metricsv1\xaa\x02(OpenTelemetry.Proto.Collector.Metrics.V1b\x06proto3"

var file_opentelemetry_proto_collector_metrics_v1_metrics_service_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_opentelemetry_proto_collector_metrics_v1_metrics_service_proto_goTypes = []any{
	(*ExportMetricsServiceRequest)(nil),  // 0: opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest
	(*ExportMetricsServiceResponse)(nil), // 1: opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse
	(*ExportMetricsPartialSuccess)(nil),  // 2: opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess
	(*v1.ResourceMetrics)(nil),           // 3: opentelemetry.proto.metrics.v1.ResourceMetrics
}
var file_opentelemetry_proto_collector_metrics_v1_metrics_service_proto_depIdxs = []int32{
	3, // 0: opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest.resource_metrics:type_name -> opentelemetry.proto.metrics.v1.ResourceMetrics
	2, // 1: opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse.partial_success:type_name -> opentelemetry.proto.collector.metrics.v1.ExportMetricsPartialSuccess
	0, // 2: opentelemetry.proto.collector.metrics.v1.MetricsService.Export:input_type -> opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceRequest
	1, // 3: opentelemetry.proto.collector.metrics.v1.MetricsService.Export:output_type -> opentelemetry.proto.collector.metrics.v1.ExportMetricsServiceResponse
	3, // [3:4] is the sub-list for method output_type
	2, // [2:3] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_opentelemetry_proto_collector_metrics_v1_metrics_service_proto_init() }
func file_opentelemetry_proto_collector_metrics_v1_metrics_service_proto_init() {
	if File_opentelemetry_proto_collector_metrics_v1_metrics_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_opentelemetry_proto_collector_metrics_v1_metrics_service_proto_rawDesc), len(file_opentelemetry_proto_collector_metrics_v1_metrics_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_opentelemetry_proto_collector_metrics_v1_metrics_service_proto_goTypes,
		DependencyIndexes: file_opentelemetry_proto_collector_metrics_v1_metrics_service_proto_depIdxs,
		MessageInfos:      file_opentelemetry_proto_collector_metrics_v1_metrics_service_proto_msgTypes,
	}.Build()
	File_opentelemetry_proto_collector_metrics_v1_metrics_service_proto = out.File
	file_opentelemetry_proto_collector_metrics_v1_metrics_service_proto_goTypes = nil
	file_opentelemetry_proto_collector_metrics_v1_metrics_service_proto_depIdxs = nil
}
