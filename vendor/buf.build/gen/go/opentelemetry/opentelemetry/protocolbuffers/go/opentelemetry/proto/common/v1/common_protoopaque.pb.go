// Copyright 2019, OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        (unknown)
// source: opentelemetry/proto/common/v1/common.proto

//go:build protoopaque

package commonv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AnyValue is used to represent any type of attribute value. AnyValue may contain a
// primitive value such as a string or integer or it may contain an arbitrary nested
// object containing arrays, key-value lists and primitives.
type AnyValue struct {
	state            protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Value isAnyValue_Value       `protobuf_oneof:"value"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *AnyValue) Reset() {
	*x = AnyValue{}
	mi := &file_opentelemetry_proto_common_v1_common_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnyValue) ProtoMessage() {}

func (x *AnyValue) ProtoReflect() protoreflect.Message {
	mi := &file_opentelemetry_proto_common_v1_common_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *AnyValue) GetStringValue() string {
	if x != nil {
		if x, ok := x.xxx_hidden_Value.(*anyValue_StringValue); ok {
			return x.StringValue
		}
	}
	return ""
}

func (x *AnyValue) GetBoolValue() bool {
	if x != nil {
		if x, ok := x.xxx_hidden_Value.(*anyValue_BoolValue); ok {
			return x.BoolValue
		}
	}
	return false
}

func (x *AnyValue) GetIntValue() int64 {
	if x != nil {
		if x, ok := x.xxx_hidden_Value.(*anyValue_IntValue); ok {
			return x.IntValue
		}
	}
	return 0
}

func (x *AnyValue) GetDoubleValue() float64 {
	if x != nil {
		if x, ok := x.xxx_hidden_Value.(*anyValue_DoubleValue); ok {
			return x.DoubleValue
		}
	}
	return 0
}

func (x *AnyValue) GetArrayValue() *ArrayValue {
	if x != nil {
		if x, ok := x.xxx_hidden_Value.(*anyValue_ArrayValue); ok {
			return x.ArrayValue
		}
	}
	return nil
}

func (x *AnyValue) GetKvlistValue() *KeyValueList {
	if x != nil {
		if x, ok := x.xxx_hidden_Value.(*anyValue_KvlistValue); ok {
			return x.KvlistValue
		}
	}
	return nil
}

func (x *AnyValue) GetBytesValue() []byte {
	if x != nil {
		if x, ok := x.xxx_hidden_Value.(*anyValue_BytesValue); ok {
			return x.BytesValue
		}
	}
	return nil
}

func (x *AnyValue) SetStringValue(v string) {
	x.xxx_hidden_Value = &anyValue_StringValue{v}
}

func (x *AnyValue) SetBoolValue(v bool) {
	x.xxx_hidden_Value = &anyValue_BoolValue{v}
}

func (x *AnyValue) SetIntValue(v int64) {
	x.xxx_hidden_Value = &anyValue_IntValue{v}
}

func (x *AnyValue) SetDoubleValue(v float64) {
	x.xxx_hidden_Value = &anyValue_DoubleValue{v}
}

func (x *AnyValue) SetArrayValue(v *ArrayValue) {
	if v == nil {
		x.xxx_hidden_Value = nil
		return
	}
	x.xxx_hidden_Value = &anyValue_ArrayValue{v}
}

func (x *AnyValue) SetKvlistValue(v *KeyValueList) {
	if v == nil {
		x.xxx_hidden_Value = nil
		return
	}
	x.xxx_hidden_Value = &anyValue_KvlistValue{v}
}

func (x *AnyValue) SetBytesValue(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Value = &anyValue_BytesValue{v}
}

func (x *AnyValue) HasValue() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Value != nil
}

func (x *AnyValue) HasStringValue() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Value.(*anyValue_StringValue)
	return ok
}

func (x *AnyValue) HasBoolValue() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Value.(*anyValue_BoolValue)
	return ok
}

func (x *AnyValue) HasIntValue() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Value.(*anyValue_IntValue)
	return ok
}

func (x *AnyValue) HasDoubleValue() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Value.(*anyValue_DoubleValue)
	return ok
}

func (x *AnyValue) HasArrayValue() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Value.(*anyValue_ArrayValue)
	return ok
}

func (x *AnyValue) HasKvlistValue() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Value.(*anyValue_KvlistValue)
	return ok
}

func (x *AnyValue) HasBytesValue() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_Value.(*anyValue_BytesValue)
	return ok
}

func (x *AnyValue) ClearValue() {
	x.xxx_hidden_Value = nil
}

func (x *AnyValue) ClearStringValue() {
	if _, ok := x.xxx_hidden_Value.(*anyValue_StringValue); ok {
		x.xxx_hidden_Value = nil
	}
}

func (x *AnyValue) ClearBoolValue() {
	if _, ok := x.xxx_hidden_Value.(*anyValue_BoolValue); ok {
		x.xxx_hidden_Value = nil
	}
}

func (x *AnyValue) ClearIntValue() {
	if _, ok := x.xxx_hidden_Value.(*anyValue_IntValue); ok {
		x.xxx_hidden_Value = nil
	}
}

func (x *AnyValue) ClearDoubleValue() {
	if _, ok := x.xxx_hidden_Value.(*anyValue_DoubleValue); ok {
		x.xxx_hidden_Value = nil
	}
}

func (x *AnyValue) ClearArrayValue() {
	if _, ok := x.xxx_hidden_Value.(*anyValue_ArrayValue); ok {
		x.xxx_hidden_Value = nil
	}
}

func (x *AnyValue) ClearKvlistValue() {
	if _, ok := x.xxx_hidden_Value.(*anyValue_KvlistValue); ok {
		x.xxx_hidden_Value = nil
	}
}

func (x *AnyValue) ClearBytesValue() {
	if _, ok := x.xxx_hidden_Value.(*anyValue_BytesValue); ok {
		x.xxx_hidden_Value = nil
	}
}

const AnyValue_Value_not_set_case case_AnyValue_Value = 0
const AnyValue_StringValue_case case_AnyValue_Value = 1
const AnyValue_BoolValue_case case_AnyValue_Value = 2
const AnyValue_IntValue_case case_AnyValue_Value = 3
const AnyValue_DoubleValue_case case_AnyValue_Value = 4
const AnyValue_ArrayValue_case case_AnyValue_Value = 5
const AnyValue_KvlistValue_case case_AnyValue_Value = 6
const AnyValue_BytesValue_case case_AnyValue_Value = 7

func (x *AnyValue) WhichValue() case_AnyValue_Value {
	if x == nil {
		return AnyValue_Value_not_set_case
	}
	switch x.xxx_hidden_Value.(type) {
	case *anyValue_StringValue:
		return AnyValue_StringValue_case
	case *anyValue_BoolValue:
		return AnyValue_BoolValue_case
	case *anyValue_IntValue:
		return AnyValue_IntValue_case
	case *anyValue_DoubleValue:
		return AnyValue_DoubleValue_case
	case *anyValue_ArrayValue:
		return AnyValue_ArrayValue_case
	case *anyValue_KvlistValue:
		return AnyValue_KvlistValue_case
	case *anyValue_BytesValue:
		return AnyValue_BytesValue_case
	default:
		return AnyValue_Value_not_set_case
	}
}

type AnyValue_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The value is one of the listed fields. It is valid for all values to be unspecified
	// in which case this AnyValue is considered to be "empty".

	// Fields of oneof xxx_hidden_Value:
	StringValue *string
	BoolValue   *bool
	IntValue    *int64
	DoubleValue *float64
	ArrayValue  *ArrayValue
	KvlistValue *KeyValueList
	BytesValue  []byte
	// -- end of xxx_hidden_Value
}

func (b0 AnyValue_builder) Build() *AnyValue {
	m0 := &AnyValue{}
	b, x := &b0, m0
	_, _ = b, x
	if b.StringValue != nil {
		x.xxx_hidden_Value = &anyValue_StringValue{*b.StringValue}
	}
	if b.BoolValue != nil {
		x.xxx_hidden_Value = &anyValue_BoolValue{*b.BoolValue}
	}
	if b.IntValue != nil {
		x.xxx_hidden_Value = &anyValue_IntValue{*b.IntValue}
	}
	if b.DoubleValue != nil {
		x.xxx_hidden_Value = &anyValue_DoubleValue{*b.DoubleValue}
	}
	if b.ArrayValue != nil {
		x.xxx_hidden_Value = &anyValue_ArrayValue{b.ArrayValue}
	}
	if b.KvlistValue != nil {
		x.xxx_hidden_Value = &anyValue_KvlistValue{b.KvlistValue}
	}
	if b.BytesValue != nil {
		x.xxx_hidden_Value = &anyValue_BytesValue{b.BytesValue}
	}
	return m0
}

type case_AnyValue_Value protoreflect.FieldNumber

func (x case_AnyValue_Value) String() string {
	md := file_opentelemetry_proto_common_v1_common_proto_msgTypes[0].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isAnyValue_Value interface {
	isAnyValue_Value()
}

type anyValue_StringValue struct {
	StringValue string `protobuf:"bytes,1,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type anyValue_BoolValue struct {
	BoolValue bool `protobuf:"varint,2,opt,name=bool_value,json=boolValue,proto3,oneof"`
}

type anyValue_IntValue struct {
	IntValue int64 `protobuf:"varint,3,opt,name=int_value,json=intValue,proto3,oneof"`
}

type anyValue_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,4,opt,name=double_value,json=doubleValue,proto3,oneof"`
}

type anyValue_ArrayValue struct {
	ArrayValue *ArrayValue `protobuf:"bytes,5,opt,name=array_value,json=arrayValue,proto3,oneof"`
}

type anyValue_KvlistValue struct {
	KvlistValue *KeyValueList `protobuf:"bytes,6,opt,name=kvlist_value,json=kvlistValue,proto3,oneof"`
}

type anyValue_BytesValue struct {
	BytesValue []byte `protobuf:"bytes,7,opt,name=bytes_value,json=bytesValue,proto3,oneof"`
}

func (*anyValue_StringValue) isAnyValue_Value() {}

func (*anyValue_BoolValue) isAnyValue_Value() {}

func (*anyValue_IntValue) isAnyValue_Value() {}

func (*anyValue_DoubleValue) isAnyValue_Value() {}

func (*anyValue_ArrayValue) isAnyValue_Value() {}

func (*anyValue_KvlistValue) isAnyValue_Value() {}

func (*anyValue_BytesValue) isAnyValue_Value() {}

// ArrayValue is a list of AnyValue messages. We need ArrayValue as a message
// since oneof in AnyValue does not allow repeated fields.
type ArrayValue struct {
	state             protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Values *[]*AnyValue           `protobuf:"bytes,1,rep,name=values,proto3"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ArrayValue) Reset() {
	*x = ArrayValue{}
	mi := &file_opentelemetry_proto_common_v1_common_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArrayValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArrayValue) ProtoMessage() {}

func (x *ArrayValue) ProtoReflect() protoreflect.Message {
	mi := &file_opentelemetry_proto_common_v1_common_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ArrayValue) GetValues() []*AnyValue {
	if x != nil {
		if x.xxx_hidden_Values != nil {
			return *x.xxx_hidden_Values
		}
	}
	return nil
}

func (x *ArrayValue) SetValues(v []*AnyValue) {
	x.xxx_hidden_Values = &v
}

type ArrayValue_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Array of values. The array may be empty (contain 0 elements).
	Values []*AnyValue
}

func (b0 ArrayValue_builder) Build() *ArrayValue {
	m0 := &ArrayValue{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Values = &b.Values
	return m0
}

// KeyValueList is a list of KeyValue messages. We need KeyValueList as a message
// since `oneof` in AnyValue does not allow repeated fields. Everywhere else where we need
// a list of KeyValue messages (e.g. in Span) we use `repeated KeyValue` directly to
// avoid unnecessary extra wrapping (which slows down the protocol). The 2 approaches
// are semantically equivalent.
type KeyValueList struct {
	state             protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Values *[]*KeyValue           `protobuf:"bytes,1,rep,name=values,proto3"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *KeyValueList) Reset() {
	*x = KeyValueList{}
	mi := &file_opentelemetry_proto_common_v1_common_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyValueList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValueList) ProtoMessage() {}

func (x *KeyValueList) ProtoReflect() protoreflect.Message {
	mi := &file_opentelemetry_proto_common_v1_common_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *KeyValueList) GetValues() []*KeyValue {
	if x != nil {
		if x.xxx_hidden_Values != nil {
			return *x.xxx_hidden_Values
		}
	}
	return nil
}

func (x *KeyValueList) SetValues(v []*KeyValue) {
	x.xxx_hidden_Values = &v
}

type KeyValueList_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// A collection of key/value pairs of key-value pairs. The list may be empty (may
	// contain 0 elements).
	// The keys MUST be unique (it is not allowed to have more than one
	// value with the same key).
	Values []*KeyValue
}

func (b0 KeyValueList_builder) Build() *KeyValueList {
	m0 := &KeyValueList{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Values = &b.Values
	return m0
}

// KeyValue is a key-value pair that is used to store Span attributes, Link
// attributes, etc.
type KeyValue struct {
	state            protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Key   string                 `protobuf:"bytes,1,opt,name=key,proto3"`
	xxx_hidden_Value *AnyValue              `protobuf:"bytes,2,opt,name=value,proto3"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *KeyValue) Reset() {
	*x = KeyValue{}
	mi := &file_opentelemetry_proto_common_v1_common_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValue) ProtoMessage() {}

func (x *KeyValue) ProtoReflect() protoreflect.Message {
	mi := &file_opentelemetry_proto_common_v1_common_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *KeyValue) GetKey() string {
	if x != nil {
		return x.xxx_hidden_Key
	}
	return ""
}

func (x *KeyValue) GetValue() *AnyValue {
	if x != nil {
		return x.xxx_hidden_Value
	}
	return nil
}

func (x *KeyValue) SetKey(v string) {
	x.xxx_hidden_Key = v
}

func (x *KeyValue) SetValue(v *AnyValue) {
	x.xxx_hidden_Value = v
}

func (x *KeyValue) HasValue() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Value != nil
}

func (x *KeyValue) ClearValue() {
	x.xxx_hidden_Value = nil
}

type KeyValue_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Key   string
	Value *AnyValue
}

func (b0 KeyValue_builder) Build() *KeyValue {
	m0 := &KeyValue{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Key = b.Key
	x.xxx_hidden_Value = b.Value
	return m0
}

// InstrumentationScope is a message representing the instrumentation scope information
// such as the fully qualified name and version.
type InstrumentationScope struct {
	state                             protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Name                   string                 `protobuf:"bytes,1,opt,name=name,proto3"`
	xxx_hidden_Version                string                 `protobuf:"bytes,2,opt,name=version,proto3"`
	xxx_hidden_Attributes             *[]*KeyValue           `protobuf:"bytes,3,rep,name=attributes,proto3"`
	xxx_hidden_DroppedAttributesCount uint32                 `protobuf:"varint,4,opt,name=dropped_attributes_count,json=droppedAttributesCount,proto3"`
	unknownFields                     protoimpl.UnknownFields
	sizeCache                         protoimpl.SizeCache
}

func (x *InstrumentationScope) Reset() {
	*x = InstrumentationScope{}
	mi := &file_opentelemetry_proto_common_v1_common_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InstrumentationScope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentationScope) ProtoMessage() {}

func (x *InstrumentationScope) ProtoReflect() protoreflect.Message {
	mi := &file_opentelemetry_proto_common_v1_common_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *InstrumentationScope) GetName() string {
	if x != nil {
		return x.xxx_hidden_Name
	}
	return ""
}

func (x *InstrumentationScope) GetVersion() string {
	if x != nil {
		return x.xxx_hidden_Version
	}
	return ""
}

func (x *InstrumentationScope) GetAttributes() []*KeyValue {
	if x != nil {
		if x.xxx_hidden_Attributes != nil {
			return *x.xxx_hidden_Attributes
		}
	}
	return nil
}

func (x *InstrumentationScope) GetDroppedAttributesCount() uint32 {
	if x != nil {
		return x.xxx_hidden_DroppedAttributesCount
	}
	return 0
}

func (x *InstrumentationScope) SetName(v string) {
	x.xxx_hidden_Name = v
}

func (x *InstrumentationScope) SetVersion(v string) {
	x.xxx_hidden_Version = v
}

func (x *InstrumentationScope) SetAttributes(v []*KeyValue) {
	x.xxx_hidden_Attributes = &v
}

func (x *InstrumentationScope) SetDroppedAttributesCount(v uint32) {
	x.xxx_hidden_DroppedAttributesCount = v
}

type InstrumentationScope_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// An empty instrumentation scope name means the name is unknown.
	Name    string
	Version string
	// Additional attributes that describe the scope. [Optional].
	// Attribute keys MUST be unique (it is not allowed to have more than one
	// attribute with the same key).
	Attributes             []*KeyValue
	DroppedAttributesCount uint32
}

func (b0 InstrumentationScope_builder) Build() *InstrumentationScope {
	m0 := &InstrumentationScope{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Name = b.Name
	x.xxx_hidden_Version = b.Version
	x.xxx_hidden_Attributes = &b.Attributes
	x.xxx_hidden_DroppedAttributesCount = b.DroppedAttributesCount
	return m0
}

var File_opentelemetry_proto_common_v1_common_proto protoreflect.FileDescriptor

var file_opentelemetry_proto_common_v1_common_proto_rawDesc = string([]byte{
	0x0a, 0x2a, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x6f, 0x70,
	0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x22, 0xe0, 0x02, 0x0a, 0x08,
	0x41, 0x6e, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a,
	0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d,
	0x0a, 0x09, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a,
	0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x4c, 0x0a, 0x0b, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x72, 0x72, 0x61, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x50, 0x0a, 0x0c, 0x6b, 0x76, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x6b, 0x76, 0x6c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4d,
	0x0a, 0x0a, 0x41, 0x72, 0x72, 0x61, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3f, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x4f, 0x0a,
	0x0c, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3f, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x5b,
	0x0a, 0x08, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3d, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc7, 0x01, 0x0a, 0x14,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x64,
	0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x64,
	0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0xb9, 0x01, 0x0a, 0x20, 0x69, 0x6f, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x42, 0x0b, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x66, 0x62, 0x75, 0x66, 0x2e, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x6f, 0x70, 0x65, 0x6e,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x2f, 0x67, 0x6f, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x74,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x76,
	0x31, 0xaa, 0x02, 0x1d, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x56,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var file_opentelemetry_proto_common_v1_common_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_opentelemetry_proto_common_v1_common_proto_goTypes = []any{
	(*AnyValue)(nil),             // 0: opentelemetry.proto.common.v1.AnyValue
	(*ArrayValue)(nil),           // 1: opentelemetry.proto.common.v1.ArrayValue
	(*KeyValueList)(nil),         // 2: opentelemetry.proto.common.v1.KeyValueList
	(*KeyValue)(nil),             // 3: opentelemetry.proto.common.v1.KeyValue
	(*InstrumentationScope)(nil), // 4: opentelemetry.proto.common.v1.InstrumentationScope
}
var file_opentelemetry_proto_common_v1_common_proto_depIdxs = []int32{
	1, // 0: opentelemetry.proto.common.v1.AnyValue.array_value:type_name -> opentelemetry.proto.common.v1.ArrayValue
	2, // 1: opentelemetry.proto.common.v1.AnyValue.kvlist_value:type_name -> opentelemetry.proto.common.v1.KeyValueList
	0, // 2: opentelemetry.proto.common.v1.ArrayValue.values:type_name -> opentelemetry.proto.common.v1.AnyValue
	3, // 3: opentelemetry.proto.common.v1.KeyValueList.values:type_name -> opentelemetry.proto.common.v1.KeyValue
	0, // 4: opentelemetry.proto.common.v1.KeyValue.value:type_name -> opentelemetry.proto.common.v1.AnyValue
	3, // 5: opentelemetry.proto.common.v1.InstrumentationScope.attributes:type_name -> opentelemetry.proto.common.v1.KeyValue
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_opentelemetry_proto_common_v1_common_proto_init() }
func file_opentelemetry_proto_common_v1_common_proto_init() {
	if File_opentelemetry_proto_common_v1_common_proto != nil {
		return
	}
	file_opentelemetry_proto_common_v1_common_proto_msgTypes[0].OneofWrappers = []any{
		(*anyValue_StringValue)(nil),
		(*anyValue_BoolValue)(nil),
		(*anyValue_IntValue)(nil),
		(*anyValue_DoubleValue)(nil),
		(*anyValue_ArrayValue)(nil),
		(*anyValue_KvlistValue)(nil),
		(*anyValue_BytesValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_opentelemetry_proto_common_v1_common_proto_rawDesc), len(file_opentelemetry_proto_common_v1_common_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_opentelemetry_proto_common_v1_common_proto_goTypes,
		DependencyIndexes: file_opentelemetry_proto_common_v1_common_proto_depIdxs,
		MessageInfos:      file_opentelemetry_proto_common_v1_common_proto_msgTypes,
	}.Build()
	File_opentelemetry_proto_common_v1_common_proto = out.File
	file_opentelemetry_proto_common_v1_common_proto_goTypes = nil
	file_opentelemetry_proto_common_v1_common_proto_depIdxs = nil
}
