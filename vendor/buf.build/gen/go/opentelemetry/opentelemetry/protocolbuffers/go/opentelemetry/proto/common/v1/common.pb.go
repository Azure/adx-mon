// Copyright 2019, OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        (unknown)
// source: opentelemetry/proto/common/v1/common.proto

//go:build !protoopaque

package commonv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AnyValue is used to represent any type of attribute value. AnyValue may contain a
// primitive value such as a string or integer or it may contain an arbitrary nested
// object containing arrays, key-value lists and primitives.
type AnyValue struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// The value is one of the listed fields. It is valid for all values to be unspecified
	// in which case this AnyValue is considered to be "empty".
	//
	// Types that are valid to be assigned to Value:
	//
	//	*AnyValue_StringValue
	//	*AnyValue_BoolValue
	//	*AnyValue_IntValue
	//	*AnyValue_DoubleValue
	//	*AnyValue_ArrayValue
	//	*AnyValue_KvlistValue
	//	*AnyValue_BytesValue
	Value         isAnyValue_Value `protobuf_oneof:"value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AnyValue) Reset() {
	*x = AnyValue{}
	mi := &file_opentelemetry_proto_common_v1_common_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnyValue) ProtoMessage() {}

func (x *AnyValue) ProtoReflect() protoreflect.Message {
	mi := &file_opentelemetry_proto_common_v1_common_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *AnyValue) GetValue() isAnyValue_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AnyValue) GetStringValue() string {
	if x != nil {
		if x, ok := x.Value.(*AnyValue_StringValue); ok {
			return x.StringValue
		}
	}
	return ""
}

func (x *AnyValue) GetBoolValue() bool {
	if x != nil {
		if x, ok := x.Value.(*AnyValue_BoolValue); ok {
			return x.BoolValue
		}
	}
	return false
}

func (x *AnyValue) GetIntValue() int64 {
	if x != nil {
		if x, ok := x.Value.(*AnyValue_IntValue); ok {
			return x.IntValue
		}
	}
	return 0
}

func (x *AnyValue) GetDoubleValue() float64 {
	if x != nil {
		if x, ok := x.Value.(*AnyValue_DoubleValue); ok {
			return x.DoubleValue
		}
	}
	return 0
}

func (x *AnyValue) GetArrayValue() *ArrayValue {
	if x != nil {
		if x, ok := x.Value.(*AnyValue_ArrayValue); ok {
			return x.ArrayValue
		}
	}
	return nil
}

func (x *AnyValue) GetKvlistValue() *KeyValueList {
	if x != nil {
		if x, ok := x.Value.(*AnyValue_KvlistValue); ok {
			return x.KvlistValue
		}
	}
	return nil
}

func (x *AnyValue) GetBytesValue() []byte {
	if x != nil {
		if x, ok := x.Value.(*AnyValue_BytesValue); ok {
			return x.BytesValue
		}
	}
	return nil
}

func (x *AnyValue) SetStringValue(v string) {
	x.Value = &AnyValue_StringValue{v}
}

func (x *AnyValue) SetBoolValue(v bool) {
	x.Value = &AnyValue_BoolValue{v}
}

func (x *AnyValue) SetIntValue(v int64) {
	x.Value = &AnyValue_IntValue{v}
}

func (x *AnyValue) SetDoubleValue(v float64) {
	x.Value = &AnyValue_DoubleValue{v}
}

func (x *AnyValue) SetArrayValue(v *ArrayValue) {
	if v == nil {
		x.Value = nil
		return
	}
	x.Value = &AnyValue_ArrayValue{v}
}

func (x *AnyValue) SetKvlistValue(v *KeyValueList) {
	if v == nil {
		x.Value = nil
		return
	}
	x.Value = &AnyValue_KvlistValue{v}
}

func (x *AnyValue) SetBytesValue(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.Value = &AnyValue_BytesValue{v}
}

func (x *AnyValue) HasValue() bool {
	if x == nil {
		return false
	}
	return x.Value != nil
}

func (x *AnyValue) HasStringValue() bool {
	if x == nil {
		return false
	}
	_, ok := x.Value.(*AnyValue_StringValue)
	return ok
}

func (x *AnyValue) HasBoolValue() bool {
	if x == nil {
		return false
	}
	_, ok := x.Value.(*AnyValue_BoolValue)
	return ok
}

func (x *AnyValue) HasIntValue() bool {
	if x == nil {
		return false
	}
	_, ok := x.Value.(*AnyValue_IntValue)
	return ok
}

func (x *AnyValue) HasDoubleValue() bool {
	if x == nil {
		return false
	}
	_, ok := x.Value.(*AnyValue_DoubleValue)
	return ok
}

func (x *AnyValue) HasArrayValue() bool {
	if x == nil {
		return false
	}
	_, ok := x.Value.(*AnyValue_ArrayValue)
	return ok
}

func (x *AnyValue) HasKvlistValue() bool {
	if x == nil {
		return false
	}
	_, ok := x.Value.(*AnyValue_KvlistValue)
	return ok
}

func (x *AnyValue) HasBytesValue() bool {
	if x == nil {
		return false
	}
	_, ok := x.Value.(*AnyValue_BytesValue)
	return ok
}

func (x *AnyValue) ClearValue() {
	x.Value = nil
}

func (x *AnyValue) ClearStringValue() {
	if _, ok := x.Value.(*AnyValue_StringValue); ok {
		x.Value = nil
	}
}

func (x *AnyValue) ClearBoolValue() {
	if _, ok := x.Value.(*AnyValue_BoolValue); ok {
		x.Value = nil
	}
}

func (x *AnyValue) ClearIntValue() {
	if _, ok := x.Value.(*AnyValue_IntValue); ok {
		x.Value = nil
	}
}

func (x *AnyValue) ClearDoubleValue() {
	if _, ok := x.Value.(*AnyValue_DoubleValue); ok {
		x.Value = nil
	}
}

func (x *AnyValue) ClearArrayValue() {
	if _, ok := x.Value.(*AnyValue_ArrayValue); ok {
		x.Value = nil
	}
}

func (x *AnyValue) ClearKvlistValue() {
	if _, ok := x.Value.(*AnyValue_KvlistValue); ok {
		x.Value = nil
	}
}

func (x *AnyValue) ClearBytesValue() {
	if _, ok := x.Value.(*AnyValue_BytesValue); ok {
		x.Value = nil
	}
}

const AnyValue_Value_not_set_case case_AnyValue_Value = 0
const AnyValue_StringValue_case case_AnyValue_Value = 1
const AnyValue_BoolValue_case case_AnyValue_Value = 2
const AnyValue_IntValue_case case_AnyValue_Value = 3
const AnyValue_DoubleValue_case case_AnyValue_Value = 4
const AnyValue_ArrayValue_case case_AnyValue_Value = 5
const AnyValue_KvlistValue_case case_AnyValue_Value = 6
const AnyValue_BytesValue_case case_AnyValue_Value = 7

func (x *AnyValue) WhichValue() case_AnyValue_Value {
	if x == nil {
		return AnyValue_Value_not_set_case
	}
	switch x.Value.(type) {
	case *AnyValue_StringValue:
		return AnyValue_StringValue_case
	case *AnyValue_BoolValue:
		return AnyValue_BoolValue_case
	case *AnyValue_IntValue:
		return AnyValue_IntValue_case
	case *AnyValue_DoubleValue:
		return AnyValue_DoubleValue_case
	case *AnyValue_ArrayValue:
		return AnyValue_ArrayValue_case
	case *AnyValue_KvlistValue:
		return AnyValue_KvlistValue_case
	case *AnyValue_BytesValue:
		return AnyValue_BytesValue_case
	default:
		return AnyValue_Value_not_set_case
	}
}

type AnyValue_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The value is one of the listed fields. It is valid for all values to be unspecified
	// in which case this AnyValue is considered to be "empty".

	// Fields of oneof Value:
	StringValue *string
	BoolValue   *bool
	IntValue    *int64
	DoubleValue *float64
	ArrayValue  *ArrayValue
	KvlistValue *KeyValueList
	BytesValue  []byte
	// -- end of Value
}

func (b0 AnyValue_builder) Build() *AnyValue {
	m0 := &AnyValue{}
	b, x := &b0, m0
	_, _ = b, x
	if b.StringValue != nil {
		x.Value = &AnyValue_StringValue{*b.StringValue}
	}
	if b.BoolValue != nil {
		x.Value = &AnyValue_BoolValue{*b.BoolValue}
	}
	if b.IntValue != nil {
		x.Value = &AnyValue_IntValue{*b.IntValue}
	}
	if b.DoubleValue != nil {
		x.Value = &AnyValue_DoubleValue{*b.DoubleValue}
	}
	if b.ArrayValue != nil {
		x.Value = &AnyValue_ArrayValue{b.ArrayValue}
	}
	if b.KvlistValue != nil {
		x.Value = &AnyValue_KvlistValue{b.KvlistValue}
	}
	if b.BytesValue != nil {
		x.Value = &AnyValue_BytesValue{b.BytesValue}
	}
	return m0
}

type case_AnyValue_Value protoreflect.FieldNumber

func (x case_AnyValue_Value) String() string {
	md := file_opentelemetry_proto_common_v1_common_proto_msgTypes[0].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isAnyValue_Value interface {
	isAnyValue_Value()
}

type AnyValue_StringValue struct {
	StringValue string `protobuf:"bytes,1,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type AnyValue_BoolValue struct {
	BoolValue bool `protobuf:"varint,2,opt,name=bool_value,json=boolValue,proto3,oneof"`
}

type AnyValue_IntValue struct {
	IntValue int64 `protobuf:"varint,3,opt,name=int_value,json=intValue,proto3,oneof"`
}

type AnyValue_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,4,opt,name=double_value,json=doubleValue,proto3,oneof"`
}

type AnyValue_ArrayValue struct {
	ArrayValue *ArrayValue `protobuf:"bytes,5,opt,name=array_value,json=arrayValue,proto3,oneof"`
}

type AnyValue_KvlistValue struct {
	KvlistValue *KeyValueList `protobuf:"bytes,6,opt,name=kvlist_value,json=kvlistValue,proto3,oneof"`
}

type AnyValue_BytesValue struct {
	BytesValue []byte `protobuf:"bytes,7,opt,name=bytes_value,json=bytesValue,proto3,oneof"`
}

func (*AnyValue_StringValue) isAnyValue_Value() {}

func (*AnyValue_BoolValue) isAnyValue_Value() {}

func (*AnyValue_IntValue) isAnyValue_Value() {}

func (*AnyValue_DoubleValue) isAnyValue_Value() {}

func (*AnyValue_ArrayValue) isAnyValue_Value() {}

func (*AnyValue_KvlistValue) isAnyValue_Value() {}

func (*AnyValue_BytesValue) isAnyValue_Value() {}

// ArrayValue is a list of AnyValue messages. We need ArrayValue as a message
// since oneof in AnyValue does not allow repeated fields.
type ArrayValue struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// Array of values. The array may be empty (contain 0 elements).
	Values        []*AnyValue `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArrayValue) Reset() {
	*x = ArrayValue{}
	mi := &file_opentelemetry_proto_common_v1_common_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArrayValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArrayValue) ProtoMessage() {}

func (x *ArrayValue) ProtoReflect() protoreflect.Message {
	mi := &file_opentelemetry_proto_common_v1_common_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ArrayValue) GetValues() []*AnyValue {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *ArrayValue) SetValues(v []*AnyValue) {
	x.Values = v
}

type ArrayValue_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Array of values. The array may be empty (contain 0 elements).
	Values []*AnyValue
}

func (b0 ArrayValue_builder) Build() *ArrayValue {
	m0 := &ArrayValue{}
	b, x := &b0, m0
	_, _ = b, x
	x.Values = b.Values
	return m0
}

// KeyValueList is a list of KeyValue messages. We need KeyValueList as a message
// since `oneof` in AnyValue does not allow repeated fields. Everywhere else where we need
// a list of KeyValue messages (e.g. in Span) we use `repeated KeyValue` directly to
// avoid unnecessary extra wrapping (which slows down the protocol). The 2 approaches
// are semantically equivalent.
type KeyValueList struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// A collection of key/value pairs of key-value pairs. The list may be empty (may
	// contain 0 elements).
	// The keys MUST be unique (it is not allowed to have more than one
	// value with the same key).
	Values        []*KeyValue `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeyValueList) Reset() {
	*x = KeyValueList{}
	mi := &file_opentelemetry_proto_common_v1_common_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyValueList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValueList) ProtoMessage() {}

func (x *KeyValueList) ProtoReflect() protoreflect.Message {
	mi := &file_opentelemetry_proto_common_v1_common_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *KeyValueList) GetValues() []*KeyValue {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *KeyValueList) SetValues(v []*KeyValue) {
	x.Values = v
}

type KeyValueList_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// A collection of key/value pairs of key-value pairs. The list may be empty (may
	// contain 0 elements).
	// The keys MUST be unique (it is not allowed to have more than one
	// value with the same key).
	Values []*KeyValue
}

func (b0 KeyValueList_builder) Build() *KeyValueList {
	m0 := &KeyValueList{}
	b, x := &b0, m0
	_, _ = b, x
	x.Values = b.Values
	return m0
}

// KeyValue is a key-value pair that is used to store Span attributes, Link
// attributes, etc.
type KeyValue struct {
	state         protoimpl.MessageState `protogen:"hybrid.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value         *AnyValue              `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeyValue) Reset() {
	*x = KeyValue{}
	mi := &file_opentelemetry_proto_common_v1_common_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValue) ProtoMessage() {}

func (x *KeyValue) ProtoReflect() protoreflect.Message {
	mi := &file_opentelemetry_proto_common_v1_common_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *KeyValue) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KeyValue) GetValue() *AnyValue {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *KeyValue) SetKey(v string) {
	x.Key = v
}

func (x *KeyValue) SetValue(v *AnyValue) {
	x.Value = v
}

func (x *KeyValue) HasValue() bool {
	if x == nil {
		return false
	}
	return x.Value != nil
}

func (x *KeyValue) ClearValue() {
	x.Value = nil
}

type KeyValue_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Key   string
	Value *AnyValue
}

func (b0 KeyValue_builder) Build() *KeyValue {
	m0 := &KeyValue{}
	b, x := &b0, m0
	_, _ = b, x
	x.Key = b.Key
	x.Value = b.Value
	return m0
}

// InstrumentationScope is a message representing the instrumentation scope information
// such as the fully qualified name and version.
type InstrumentationScope struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// An empty instrumentation scope name means the name is unknown.
	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// Additional attributes that describe the scope. [Optional].
	// Attribute keys MUST be unique (it is not allowed to have more than one
	// attribute with the same key).
	Attributes             []*KeyValue `protobuf:"bytes,3,rep,name=attributes,proto3" json:"attributes,omitempty"`
	DroppedAttributesCount uint32      `protobuf:"varint,4,opt,name=dropped_attributes_count,json=droppedAttributesCount,proto3" json:"dropped_attributes_count,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *InstrumentationScope) Reset() {
	*x = InstrumentationScope{}
	mi := &file_opentelemetry_proto_common_v1_common_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InstrumentationScope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentationScope) ProtoMessage() {}

func (x *InstrumentationScope) ProtoReflect() protoreflect.Message {
	mi := &file_opentelemetry_proto_common_v1_common_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *InstrumentationScope) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InstrumentationScope) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *InstrumentationScope) GetAttributes() []*KeyValue {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *InstrumentationScope) GetDroppedAttributesCount() uint32 {
	if x != nil {
		return x.DroppedAttributesCount
	}
	return 0
}

func (x *InstrumentationScope) SetName(v string) {
	x.Name = v
}

func (x *InstrumentationScope) SetVersion(v string) {
	x.Version = v
}

func (x *InstrumentationScope) SetAttributes(v []*KeyValue) {
	x.Attributes = v
}

func (x *InstrumentationScope) SetDroppedAttributesCount(v uint32) {
	x.DroppedAttributesCount = v
}

type InstrumentationScope_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// An empty instrumentation scope name means the name is unknown.
	Name    string
	Version string
	// Additional attributes that describe the scope. [Optional].
	// Attribute keys MUST be unique (it is not allowed to have more than one
	// attribute with the same key).
	Attributes             []*KeyValue
	DroppedAttributesCount uint32
}

func (b0 InstrumentationScope_builder) Build() *InstrumentationScope {
	m0 := &InstrumentationScope{}
	b, x := &b0, m0
	_, _ = b, x
	x.Name = b.Name
	x.Version = b.Version
	x.Attributes = b.Attributes
	x.DroppedAttributesCount = b.DroppedAttributesCount
	return m0
}

// A reference to an Entity.
// Entity represents an object of interest associated with produced telemetry: e.g spans, metrics, profiles, or logs.
//
// Status: [Development]
type EntityRef struct {
	state protoimpl.MessageState `protogen:"hybrid.v1"`
	// The Schema URL, if known. This is the identifier of the Schema that the entity data
	// is recorded in. To learn more about Schema URL see
	// https://opentelemetry.io/docs/specs/otel/schemas/#schema-url
	//
	// This schema_url applies to the data in this message and to the Resource attributes
	// referenced by id_keys and description_keys.
	// TODO: discuss if we are happy with this somewhat complicated definition of what
	// the schema_url applies to.
	//
	// This field obsoletes the schema_url field in ResourceMetrics/ResourceSpans/ResourceLogs.
	SchemaUrl string `protobuf:"bytes,1,opt,name=schema_url,json=schemaUrl,proto3" json:"schema_url,omitempty"`
	// Defines the type of the entity. MUST not change during the lifetime of the entity.
	// For example: "service" or "host". This field is required and MUST not be empty
	// for valid entities.
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// Attribute Keys that identify the entity.
	// MUST not change during the lifetime of the entity. The Id must contain at least one attribute.
	// These keys MUST exist in the containing {message}.attributes.
	IdKeys []string `protobuf:"bytes,3,rep,name=id_keys,json=idKeys,proto3" json:"id_keys,omitempty"`
	// Descriptive (non-identifying) attribute keys of the entity.
	// MAY change over the lifetime of the entity. MAY be empty.
	// These attribute keys are not part of entity's identity.
	// These keys MUST exist in the containing {message}.attributes.
	DescriptionKeys []string `protobuf:"bytes,4,rep,name=description_keys,json=descriptionKeys,proto3" json:"description_keys,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *EntityRef) Reset() {
	*x = EntityRef{}
	mi := &file_opentelemetry_proto_common_v1_common_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntityRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntityRef) ProtoMessage() {}

func (x *EntityRef) ProtoReflect() protoreflect.Message {
	mi := &file_opentelemetry_proto_common_v1_common_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *EntityRef) GetSchemaUrl() string {
	if x != nil {
		return x.SchemaUrl
	}
	return ""
}

func (x *EntityRef) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *EntityRef) GetIdKeys() []string {
	if x != nil {
		return x.IdKeys
	}
	return nil
}

func (x *EntityRef) GetDescriptionKeys() []string {
	if x != nil {
		return x.DescriptionKeys
	}
	return nil
}

func (x *EntityRef) SetSchemaUrl(v string) {
	x.SchemaUrl = v
}

func (x *EntityRef) SetType(v string) {
	x.Type = v
}

func (x *EntityRef) SetIdKeys(v []string) {
	x.IdKeys = v
}

func (x *EntityRef) SetDescriptionKeys(v []string) {
	x.DescriptionKeys = v
}

type EntityRef_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The Schema URL, if known. This is the identifier of the Schema that the entity data
	// is recorded in. To learn more about Schema URL see
	// https://opentelemetry.io/docs/specs/otel/schemas/#schema-url
	//
	// This schema_url applies to the data in this message and to the Resource attributes
	// referenced by id_keys and description_keys.
	// TODO: discuss if we are happy with this somewhat complicated definition of what
	// the schema_url applies to.
	//
	// This field obsoletes the schema_url field in ResourceMetrics/ResourceSpans/ResourceLogs.
	SchemaUrl string
	// Defines the type of the entity. MUST not change during the lifetime of the entity.
	// For example: "service" or "host". This field is required and MUST not be empty
	// for valid entities.
	Type string
	// Attribute Keys that identify the entity.
	// MUST not change during the lifetime of the entity. The Id must contain at least one attribute.
	// These keys MUST exist in the containing {message}.attributes.
	IdKeys []string
	// Descriptive (non-identifying) attribute keys of the entity.
	// MAY change over the lifetime of the entity. MAY be empty.
	// These attribute keys are not part of entity's identity.
	// These keys MUST exist in the containing {message}.attributes.
	DescriptionKeys []string
}

func (b0 EntityRef_builder) Build() *EntityRef {
	m0 := &EntityRef{}
	b, x := &b0, m0
	_, _ = b, x
	x.SchemaUrl = b.SchemaUrl
	x.Type = b.Type
	x.IdKeys = b.IdKeys
	x.DescriptionKeys = b.DescriptionKeys
	return m0
}

var File_opentelemetry_proto_common_v1_common_proto protoreflect.FileDescriptor

const file_opentelemetry_proto_common_v1_common_proto_rawDesc = "" +
	"\n" +
	"*opentelemetry/proto/common/v1/common.proto\x12\x1dopentelemetry.proto.common.v1\"\xe0\x02\n" +
	"\bAnyValue\x12#\n" +
	"\fstring_value\x18\x01 \x01(\tH\x00R\vstringValue\x12\x1f\n" +
	"\n" +
	"bool_value\x18\x02 \x01(\bH\x00R\tboolValue\x12\x1d\n" +
	"\tint_value\x18\x03 \x01(\x03H\x00R\bintValue\x12#\n" +
	"\fdouble_value\x18\x04 \x01(\x01H\x00R\vdoubleValue\x12L\n" +
	"\varray_value\x18\x05 \x01(\v2).opentelemetry.proto.common.v1.ArrayValueH\x00R\n" +
	"arrayValue\x12P\n" +
	"\fkvlist_value\x18\x06 \x01(\v2+.opentelemetry.proto.common.v1.KeyValueListH\x00R\vkvlistValue\x12!\n" +
	"\vbytes_value\x18\a \x01(\fH\x00R\n" +
	"bytesValueB\a\n" +
	"\x05value\"M\n" +
	"\n" +
	"ArrayValue\x12?\n" +
	"\x06values\x18\x01 \x03(\v2'.opentelemetry.proto.common.v1.AnyValueR\x06values\"O\n" +
	"\fKeyValueList\x12?\n" +
	"\x06values\x18\x01 \x03(\v2'.opentelemetry.proto.common.v1.KeyValueR\x06values\"[\n" +
	"\bKeyValue\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12=\n" +
	"\x05value\x18\x02 \x01(\v2'.opentelemetry.proto.common.v1.AnyValueR\x05value\"\xc7\x01\n" +
	"\x14InstrumentationScope\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x18\n" +
	"\aversion\x18\x02 \x01(\tR\aversion\x12G\n" +
	"\n" +
	"attributes\x18\x03 \x03(\v2'.opentelemetry.proto.common.v1.KeyValueR\n" +
	"attributes\x128\n" +
	"\x18dropped_attributes_count\x18\x04 \x01(\rR\x16droppedAttributesCount\"\x82\x01\n" +
	"\tEntityRef\x12\x1d\n" +
	"\n" +
	"schema_url\x18\x01 \x01(\tR\tschemaUrl\x12\x12\n" +
	"\x04type\x18\x02 \x01(\tR\x04type\x12\x17\n" +
	"\aid_keys\x18\x03 \x03(\tR\x06idKeys\x12)\n" +
	"\x10description_keys\x18\x04 \x03(\tR\x0fdescriptionKeysB\xb9\x01\n" +
	" io.opentelemetry.proto.common.v1B\vCommonProtoP\x01Zfbuf.build/gen/go/opentelemetry/opentelemetry/protocolbuffers/go/opentelemetry/proto/common/v1;commonv1\xaa\x02\x1dOpenTelemetry.Proto.Common.V1b\x06proto3"

var file_opentelemetry_proto_common_v1_common_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_opentelemetry_proto_common_v1_common_proto_goTypes = []any{
	(*AnyValue)(nil),             // 0: opentelemetry.proto.common.v1.AnyValue
	(*ArrayValue)(nil),           // 1: opentelemetry.proto.common.v1.ArrayValue
	(*KeyValueList)(nil),         // 2: opentelemetry.proto.common.v1.KeyValueList
	(*KeyValue)(nil),             // 3: opentelemetry.proto.common.v1.KeyValue
	(*InstrumentationScope)(nil), // 4: opentelemetry.proto.common.v1.InstrumentationScope
	(*EntityRef)(nil),            // 5: opentelemetry.proto.common.v1.EntityRef
}
var file_opentelemetry_proto_common_v1_common_proto_depIdxs = []int32{
	1, // 0: opentelemetry.proto.common.v1.AnyValue.array_value:type_name -> opentelemetry.proto.common.v1.ArrayValue
	2, // 1: opentelemetry.proto.common.v1.AnyValue.kvlist_value:type_name -> opentelemetry.proto.common.v1.KeyValueList
	0, // 2: opentelemetry.proto.common.v1.ArrayValue.values:type_name -> opentelemetry.proto.common.v1.AnyValue
	3, // 3: opentelemetry.proto.common.v1.KeyValueList.values:type_name -> opentelemetry.proto.common.v1.KeyValue
	0, // 4: opentelemetry.proto.common.v1.KeyValue.value:type_name -> opentelemetry.proto.common.v1.AnyValue
	3, // 5: opentelemetry.proto.common.v1.InstrumentationScope.attributes:type_name -> opentelemetry.proto.common.v1.KeyValue
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_opentelemetry_proto_common_v1_common_proto_init() }
func file_opentelemetry_proto_common_v1_common_proto_init() {
	if File_opentelemetry_proto_common_v1_common_proto != nil {
		return
	}
	file_opentelemetry_proto_common_v1_common_proto_msgTypes[0].OneofWrappers = []any{
		(*AnyValue_StringValue)(nil),
		(*AnyValue_BoolValue)(nil),
		(*AnyValue_IntValue)(nil),
		(*AnyValue_DoubleValue)(nil),
		(*AnyValue_ArrayValue)(nil),
		(*AnyValue_KvlistValue)(nil),
		(*AnyValue_BytesValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_opentelemetry_proto_common_v1_common_proto_rawDesc), len(file_opentelemetry_proto_common_v1_common_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_opentelemetry_proto_common_v1_common_proto_goTypes,
		DependencyIndexes: file_opentelemetry_proto_common_v1_common_proto_depIdxs,
		MessageInfos:      file_opentelemetry_proto_common_v1_common_proto_msgTypes,
	}.Build()
	File_opentelemetry_proto_common_v1_common_proto = out.File
	file_opentelemetry_proto_common_v1_common_proto_goTypes = nil
	file_opentelemetry_proto_common_v1_common_proto_depIdxs = nil
}
